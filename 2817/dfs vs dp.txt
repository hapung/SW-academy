1 1 3 2 2 3 2 1 2 1
T T F F F F F F F F 
6

dfs로 한다
각 항을 시작점으로 그뒤와 비교
1+1+3+2>6 안넘는 값 나올때까지 넘어감 => 1도착하면 ans++
근데 원하는 값이 나오면 카운트올리고 그값 빼고 넘어가서 마지막까지 갓다치자
그럼 그전에 마지막으로 더해준 3위치로 돌아와야함
그리고 3을제하고 해야함
그러면 continue를 쓰면 안될거같음
그럼 재귀로 넘어간다하면 
1
1
3
2 여기서 값이 오버됨 return

방문확인 추가
그 값을 더햇으면 true, 그 값이 최종 값이면 카운팅만 하고 넘어가?
마지막에 도착 sum 상태 확인해서 할거하고 마지막 true로 돌아가서 false로 바꾸고 다음값부터
다시 시작import java.util.*;

class Solution {

    static int N,K, ans, sum;
    static int[] seq;
    static boolean[] visited;

    static void findAns(int num) {

        sum += seq[num];
        if(num == N-1) {
            if(sum == K) ans++;
            sum -= seq[num];
            return;
        }
        if(sum > K) {
            sum -= seq[num];
            findAns(num+1);
        }
        else if(sum < K) {
            visited[num] = true;
            findAns(num+1);

        }
        else {
            sum-= seq[num];
            findAns(num+1);
            ans++;
        }
        if(!visited[num]) return;
        else {
            sum -= seq[num];
            visited[num] = false;
            findAns(num+1);
        }
    }
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        for(int test_case = 1; test_case<=T;test_case++) {

            N = sc.nextInt();
            K = sc.nextInt();
            seq = new int[N];
            visited = new boolean[N];
            ans = 0;

            for(int i=0;i<N;i++) {
                seq[i] = sc.nextInt();
            }


            findAns(0);
            System.out.printf("#%d %d\n",test_case, ans);

        }
    }
}
그 결과로 짠코드인데 비효율적
- 불필요한 visited
- 조건 분기의 과도함
- 종료조건이 모호함 num==N으로 하여 인덱스를 초과할시 종료하는것이 맞음

static void dfs(int idx, int sum) {
    if (idx == N) {
        if (sum == K) ans++;
        return;
    }

    // 현재 원소 포함
    dfs(idx + 1, sum + seq[idx]);

    // 현재 원소 미포함
    dfs(idx + 1, sum);
}

dfs 부분만 수정
sum 값추가, 포함 미포함 둘다 따짐
N이 한정적으로 정해져있어서 모든경우를 따져도 2^n 정도로 시간안에 계산가능 
N이 커진다면 => DP 를 사용하는게 맞음

핵심 부분
            // dp[i] = 합이 i가 되는 부분 수열의 개수
            int[] dp = new int[K + 1];
            dp[0] = 1; // 공집합 하나 (추후에 공집합 빼도 됨)

            for (int i = 0; i < N; i++) {//seq[i]를 포함한 새로운 수를 만들예정

                for (int j = K; j >= seq[i]; j--) {
  j 가 우리의 목표값 K 외의 값도 만들어서 추후에 사용해야함, 역순인 이유는 현재 단계에서 기존 값으로 해야해서, 앞에서 부터하면 값이 이미 갱신되어 중복됨 => 다음 줄을보면 dp에 계속 값을 더해주는데 우리는 j에서 seq를 빼서 아래서 부터 보게되므로 갱신되지않은 값을 사용하는것이 맞음
                    dp[j] += dp[j - seq[i]]; 
그 값을 통해서 dp 값 갱신해줌. 즉, j 라는 값을 갈때 현재 우리가 보고있는 seq만큼 차이나는 j-seq를 참조함. 그 값만큼 경우의수가 추가되는 것. (어떤수에 seq를 더해 j 를 만든다면 어떤수는 반드시 j-seq)
                }
            }


| 방식           | 특징                            |
| ------------ | ----------------------------- |
| DFS          | 코드 짧고 직관적, N 작을 때 좋음          |
| DFS + 가지치기   | 빠름, sum > K 시 중단              |
| DFS + 메모이제이션 | 중복 제거, N 조금 더 커도 OK           |
| **DP**       | 가장 효율적 (N×K), 중복 없이 깔끔한 합산 가능 |

최초코드에 프루닝과 메모리제이션이 과하게 들어가서 쓸데없이 복잡한 코드엿음
=> N이 크지않으므로 DFS에서 오버되는값을 단순히처리 N 이커진다면 DP 고려
